/* rexx  __ANSIBLE_ENCODE_EBCDIC__ */
/* REXX   TO CHECK OR IMPLEMENT A CLOCK CHANGE       */
/* VALID RETURN CODE ARE:-                           */
/*     0  =>  THIS SYSTEM DOES NOT CHANGE TO DAYLIGHT SAVING TIME   */
/*     3  =>  THIS SYSTEM DOES CHANGE TO DAYLIGHT SAVING TIME AND   */
/*             AND IS CURRENTLY SETUP FOR THE REQUIRED TIME ZONE    */
/*     7  =>  THIS SYSTEM IS RUNNING AT THE REQUIRED TIME ZONE AND  */
/*             IEASYS00 IN THE ALTERNATE PARMLIB HAS BEEN UPDATED   */
/*    11  =>  THIS SYSTEM IS RUNNING AT THE REQUIRED TIME ZONE BUT  */
/*             IEASYS00 IN THE ALTERNATE PARMLIB NEEDS UPDATING     */
/*    15  =>  THIS SYSTEM NEEDS AN IPL OR OTHER OPERATOR ACTION TO  */
/*             CHANGE TO THE REQUIRED TIME ZONE                     */
/*    19  =>  IEASYS00 IN THE ACTIVE PARMLIB HAS BEEN CHANGED TO    */
/*             REFLECT THE REQUIRED TIME ZONE                       */
/*    23  =>  IEASYS00 IN THE ACTIVE PARMLIB NEEDS CHANGING TO      */
/*             REFLECT THE REQUIRED TIME ZONE                       */
/*    27  =>  ONLY 1 PARMLIB CHECKED, CHECKING INCOMPLETE,          */
/*             BUT NO ERRORS FOUND                                  */
/*                                                                  */
/*   IF DIFFERENCES FOUND BETWEEN CLOCK MEMBERS , & RETURN CODE     */
/*   IS LESS THAN 30,  30 WILL BE ADDED TO THE FINAL RETURN CODE    */
/*                                                                  */

TRACE O  /* C FOR TRACE COMMANDS, O FOR TRACE OFF  */
         /* A FOR TRACE ALL CLAUSES                */

ARG MODE REQID cur new .

r1 = MVSVAR("SYMDEF","SYSR1")

if r1 == cur THEN do
   ACTRES = r1
   ALTRES = new
   end
else do
   ACTRES = new
   ALTRES = cur
   end

NODE   = SYSVAR("SYSNODE")
SMFID  = MVSVAR("SYSSMFID")

"PROF NOPREFIX"
PLIB = "SYS1.PARMLIB"
ALTOK = 1
UPDVOL = ""
NONSTD = "CONTRARY TO THE STANDARD"
SAY "CLIST CLOCKCHG CALLED TO CHECK SYSTEM CLOCK STATUS"
SAY "  ON SYSTEM "SMFID" WITH NODE NAME "NODE

IF  LENGTH(MODE) =0   THEN  DO
   CALL  PARAMERR  "MODE NOT SPECIFIED"
END;  ELSE  DO
   IF  ^ ( MODE = "CHECKP" |  MODE = "CHECKA"  | ,
           MODE = "CHECK"  |  MODE = "UPDACT"  | ,
           MODE = "UPDALT"  )  THEN  DO
      CALL  PARMERR  "MODE VALUE OF "MODE" UNACCEPTABLE"
   END
END
SAY "MODE REQUESTED IS "MODE

IF  LENGTH(SEASON) =0   THEN  DO
   CALL  PARAMERR  "REQUIRED CLOCK VALUE  NOT SPECIFIED"
END;  ELSE  DO
   IF  ^ ( REQID = "00"  |  REQID = "DS" )  THEN  DO
      CALL  PARMERR  "REQUIRED CLOCK VALUE OF "REQID" UNACCEPTABLE"
   END
END
SAY "REQUIRED CLOCK ID IS "REQID

"EXECIO 0   DISKW CLOCKLST  (OPEN"
IORC = RC
IF  IORC ^= 0  THEN  DO
   CALL EXITMSG  100 "OPEN FOR CLOCKLST FAILED WITH CODE "IORC
END


SAY " "
CMD = "D T"
CALL  "OSCMD1S" "DELAY=60 "||CMD      /*5 SEC DELAY IS DEFAULT*/
MSGCT = QUEUED()
CONBUF.0 = MSGCT
IF   MSGCT > 0  THEN  DO
   SAY "RESPONSES TO COMMAND "CMD
   DO  IC = 1  BY 1  TO MSGCT
      PARSE PULL BUF
      SAY  "   LINE "RIGHT(IC,3)" IS "BUF
      CONBUF.IC = BUF
   END
   IF   MSGCT > 1  THEN  DO
      CALL  EXITMSG  104 "UNEXPECTED RESPONSE TO COMMAND "CMD
   END
END;  ELSE  DO
   CALL  EXITMSG  108 "NO RESPONSE RECEIVED FROM COMMAND "CMD
END
PARSE  VAR CONBUF.1  . "TIME=" LTIME "DATE="LDATE ,
                     . "TIME=" GTIME "DATE="GDATE
DATEDIF = (1000 * LDATE) - (1000 * GDATE)
LMINS = SUBSTR(LTIME,1,2) * 60 + SUBSTR(LTIME,4,2)
GMINS = SUBSTR(GTIME,1,2) * 60 + SUBSTR(GTIME,4,2)
ZMINS = LMINS - GMINS + ( DATEDIF * 1440 )
ZONEOPT = "W"
IF  ZMINS < 0  THEN  DO
   ZONEOPT = "W"
   ZMINS = - ZMINS
END;  ELSE  DO
   IF ZMINS = 0  THEN  ZONEOPT = " "
                 ELSE  ZONEOPT = "E"
END


STDBAD = 0
IF  MODE ^= "CHECKA"  THEN  CALL CHEKPLIB ACTRES "ACTIVE"
CURSUFR = CURSUF
CURCNTR = CLOCKCNT
ACTBAD  = STDBAD
STDBAD = 0
IF  CLOCKCNT = 1  THEN  DO
   TZONER  = PARMTZONE.00
END;  ELSE  DO
   TZONER  = PARMTZONE.REQID
END
GTURC = GTUCBINF("V",ALTRES)
IF  GTURC = 0  THEN  DO
   LDIRC =  LISTDSI(PLIB" VOLUME("ALTRES")")
   IF  LDIRC ^= 0  THEN  DO
      ALTOK = 0
      ALTMSG = PLIB" NOT FOUND ON VOLUME "ALTRES| ,
                  |";  LISTDSI RETCODE = "LDIRC" & REASON "SYSREASON
   END
END;  ELSE  DO
   ALTOK = 0
   ALTMSG = "ALT RES VOLUME, "ALTRES", NOT AVAILABLE; "| ,
                  |"GTUCBINF RETCODE = "GTURC
END
IF  ALTOK  THEN  DO
   IF  MODE ^= "CHECKP"  THEN  CALL CHEKPLIB ALTRES "ALTERNATE"
   CURSUFA = CURSUF
   CURCNTA = CLOCKCNT
   ALTBAD  = STDBAD
   IF  CLOCKCNT = 1  THEN  DO
      TZONEA  = PARMTZONE.00
   END;  ELSE  DO
      TZONEA  = PARMTZONE.REQID
   END
END;  ELSE  DO
   ALTRES = "??????"
   CURSUFA = CURSUFR
   CURCNTA = CURCNTR
   ALTBAD  = STDBAD
   TZONEA  = TZONER
   SAY " "
   SAY  ALTMSG
   SAY  "NO CHECKING OF ALTERNATE DONE"
END

"EXECIO 0   DISKW CLOCKLST  (FINIS"


SAY  " "
STDBAD = ACTBAD + ALTBAD
IF  STDBAD > 0  THEN  DO
   RETC = 180
   IF  ACTBAD > 0  THEN DO
      SAY  RIGHT(ACTBAD,5)" STANDARDS VIOLATIONS IN ACTIVE PARMLIB"
      RETC = RETC + 8
   END
   IF  ALTBAD > 0  THEN DO
      SAY  RIGHT(ACTBAD,5)" STANDARDS VIOLATIONS IN ALTERNATE PARMLIB"
      RETC = RETC + 4
   END
   CALL EXITMSG RETC  RIGHT(STDBAD,5)" STANDARDS VIOLATIONS "| ,
                       |"DETECTED;  PROCESSING ABANDONNED."
END

IF MODE = "CHECKP"  |  MODE = "CHECKA"  THEN  DO
   IF  CLOCKCNT = 1 THEN  DO
      SAY  PARMTYPE" PARMLIB SPECIFIES FIXED TIMEZONE"
   END;  ELSE  DO
      IF  REQID = CURSUF  THEN  DO
         SAY  PARMTYPE" PARMLIB PREPARED FOR CLOCK CHANGE"
      END;  ELSE  DO
         SAY  "CLOCKCNT = "CLOCKCNT",  CURSUF = "CURSUF
         SAY  PARMTYPE" PARMLIB MAY NOT BE READY FOR CLOCK CHANGE"
      END
   END
   CALL EXITMSG  27 "CHECKING INCOMPLETE AS ONLY ONE PARMLIB CHECKED"
END


SAY  " "
/*  FORMAT NECESSARY BECAUSE, WHEN DATEDIF NEGATIVE,  */
/*    CALCULTIONS AND RESULT ARE TO 2 DECIMAL PLACES. */
ZHH = FORMAT(ZMINS%60,,0)
ZMM = FORMAT(ZMINS - ZHH * 60,,0)
IF  ZONEOPT = " "  THEN  DO
   ZONEOPT = SUBSTR(TZONER,1,1)
END
CURTZONE = ZONEOPT"."RIGHT(ZHH,2,"0")"."RIGHT(ZMM,2,"0")".00"
SAY  "CURRENT TIME ZONE IS "CURTZONE

IF  CURCNTR > CURCNTA  THEN  DO
   CALL EXITMSG 132 "REQUIRED CLOCK MEMBERS NOT PRESENT IN"| ,
                         |" ALTERNATE PARMLIB"
END
IF  CURCNTR < CURCNTA  THEN  DO
   CALL EXITMSG 136 "ALTERNATE PARMLIB SPECIFIES TIME CHANGE "| ,
                  |"REQUIRED, BUT ACTIVE SPECIFIES FIXED TIMEZONE"
END
IF  TZONEA ^= TZONER  THEN  DO
   IF  SUBSTR(TZONER,2,9) ^= ".00.00.00"  | ,
       SUBSTR(TZONEA,2,9) ^= ".00.00.00"  THEN  DO
      CALL EXITMSG 140 "DIFFERENT TIMEZONE SPECIFIED "| ,
                            |"IN MEMBER CLOCK"REQID| ,
                            |" IN ACTIVE AND ALTERNATE PARMLIBS"
   END
END

TZRMINS = SUBSTR(TZONER,3,2) * 60 + SUBSTR(TZONER,6,2)
IF  ZONEOPT = SUBSTR(TZONER,1,1)   & ,
    ABS(TZRMINS-ZMINS) < 2  THEN  DO
   TZOK = "Y"
END;  ELSE  DO
   TZOK = "N"
   SAY "ACTIVE  ZONE OPTION  = "ZONEOPT
   SAY "PARMLIB ZONE OPTTION = "SUBSTR(TZONER,1,1)
   SAY "ACTIVE  OFFSET       =  "ZMINS
   SAY "PARMLIB OFFSET       =  "TZRMINS
END

DIFFSFND = 0
CALL  CLOCKCOMP "00" ACTRES "00" ALTRES
IF  CURCNTR = 1 THEN  DO
   CLOCKSTAT = "FIXED_TIMEZONE"
   SAY  "PARMLIBS SPECIFY THAT TIMEZONE NEVER CHANGES"
   IF  TZOK = "N"  THEN ,
      CALL EXITMSG 144 "CURRENT TIMEZEONE DIFFERS FROM THAT "| ,
                         |"SPECIFIED IN PARMLIB"
   IF  TZONER = CURTZONE  THEN  DO
      SAY "CURRENT AND REQUIRED TIMEZONES ARE IDENTICAL"
   END; ELSE  DO
      SAY "CURRENT AND REQUIRED TIMEZONES ARE DIFFER BY LESS "|,
                |"2 MINUTES"
   END
   FINRC = 0
END;  ELSE  DO
   CALL  CLOCKCOMP "DS" ACTRES "DS" ALTRES
   CALL  CLOCKCOMP "00" ACTRES "DS" ACTRES
   IF REQID  =  CURSUFR  THEN  DO
      SAY  "ACTIVE PARMLIB PREPARED FOR CLOCK CHANGE"
      TZRMINS = SUBSTR(TZONER,3,2) * 60 + SUBSTR(TZONER,6,2)
      IF  ZONEOPT = SUBSTR(TZONER,1,1)  & ,
          ABS(TZRMINS-ZMINS) < 2  THEN  DO
         CLOCKSTAT = "OK_TIMEZONE"
         IF  CURSUFA = CURSUFR  THEN  DO
            SAY  "ALTERNATE PARMLIB PREPARED FOR CLOCK CHANGE"
            FINRC = 3
         END;  ELSE  DO
            FINRC = 11
            IF  MODE = "UPDALT"  THEN  DO
               IF  ALTOK  THEN  DO
                  CALL UPDATE ALTRES
                  CLOCKSTAT = "ALT_UPDATED"
               END;  ELSE  DO
                  CLOCKSTAT = "ALT_NOT_AVAILABLE"
               END
            END;  ELSE  DO
               SAY  "ALTERNATE PARMLIB MAY NOT BE READY "| ,
                           |"FOR CLOCK CHANGE"
            END
         END
      END;  ELSE  DO
         CLOCKSTAT = "IPL-READY"
         SAY "IPL STILL REQUIRED"
         FINRC = 15
      END
   END; ELSE  DO
      FINRC = 23
      IF  MODE = "UPDACT"  THEN  DO
         CALL UPDATE ACTRES
         CLOCKSTAT = "IPL-READY"
      END;  ELSE  DO
         SAY  "PARMLIB MAY NOT BE READY FOR CLOCK CHANGE"
         CLOCKSTAT = "UPDATE_NEEDED"
      END
   END
END
SAY " "

IF LENGTH(UPDVOL) > 0  THEN  DO
   VOL = UPDVOL
   CALL ALLOCRTN PLIB
   "CALL  *(IEBCOPY)"
   CPYRC = RC
   IF CPYRC ^= 0  THEN  DO
     CALL EXITMSG 164 "IEBCOPY COMPRESS FAILED WITH CODE "CPYRC
   END
   SAY " "
   SAY "COMPRESS OF SYS1.PARMLIB ON "VOL" COMPLETED SUCCESSFULLY"
END
/*CALL  "IPLSTATS"  CLOCKSTAT  ALTRES
STATRC = RESULT
IF  STATRC > 0  THEN  DO
   SAY  "IPLSTAT PROCESSING FAILED WITH CODE " STATRC
   FINRC = 1000 + STATRC
END */
IF    ALTOK  THEN  DO
   SAY "REXX EXEC CLOCKCHK COMPLETED WITHOUT ERRORS"
END;  ELSE DO
   SAY "REXX EXEC CLOCKCHK COMPLETED WITHOUT PROCESSING THE ALTRES"
   FINRC = FINRC + 3000
END
IF  DIFFSFND  THEN  DO
   SAY "UNEXPECTED DIFFERENCES FOUND BETWEEN CLOCK MEMBERS"
   IF  FINRC < 30  THEN  FINRC = FINRC + 30
END
SAY "RETURN CODE "FINRC" SET BY CLOCKCHG"
RETURN  FINRC

CHEKPLIB:
      ARG VOL PARMTYPE .
      SAY  " "
      SAY "CHECKING "PARMTYPE" "PLIB" ON VOLUME "VOL
      CALL ALLOCRTN PLIB
      CMD = "LISTDS "PLIB" MEM"
      LD.0 = 0
      OT1 = OUTTRAP("LD.")
      ADDRESS TSO CMD
      LDOK = RC
      OT2 = OUTTRAP("OFF")
      IF   LDOK ^= 0  | LD.0 < 10 THEN DO
         SAY  "COMMAND "CMD" ENDED WITH  RC = "LDOK
         SAY  RIGHT(LD.0,5)" OUTPUT LINES TRAPPED."
         IF  LD.0 > 0  THEN  DO
            DO  II = 1  BY 1  TO LD.0
               SAY "RECORD "II" IS "LD.II
            END
         END
         CALL  EXITMSG  200  "COMMAND "CMD" ENDED WITH  RC = "LDOK
      END
      MEM1ST = 0
      DO  II = 1  BY 1  TO LD.0
         IF  STRIP(LD.II) = "--VOLUMES--"  THEN  DO
            IJ = II + 1
            LDVOL =  STRIP(LD.IJ)
            IF  LDVOL ^= VOL  THEN  DO
               SAY "UNEXPECTED VOLUME "LDVOL" IN LISTDS OUTPUT"
               CALL  EXITMSG  204  "EXPECTED VOLUME WAS "VOL
            END
         END
      END
      DO  II = IJ + 1  BY 1  TO LD.0
         IF  STRIP(LD.II) = "--MEMBERS--"  THEN  DO
            MEM1ST = II + 1
            LEAVE
         END
      END
      IF  MEM1ST = 0  THEN DO
         CALL  EXITMSG  208 "NO MEMBERS FOUND, LOGIC ERROR."
      END
      MEMCNT =  LD.0 + 1 - MEM1ST
      SAY RIGHT(MEMCNT, 5)" MEMBERS DETECTED "

      CLOCKCNT = 0
      DO  II = MEM1ST  BY 1  TO LD.0
         MEM = STRIP(LD.II)
         IF  SUBSTR(MEM,1,5) = "CLOCK"  THEN  DO
            LEN = LENGTH(MEM)
            CLOCKSUF = SUBSTR(MEM,6,LEN-5)
            MSG =  "CLOCK MEMBER WITH SUFFIX "CLOCKSUF" DETECTED"
            XTEXT = ""
            IF  LEN = 8  THEN  DO
               SAY  MSG" AND IGNORED"
               ITERATE
            END
            IF  CLOCKSUF = "0X"  |  CLOCKSUF = "DX"  THEN  DO
               SAY  MSG" AND IGNORED"
               ITERATE
            END
            SAY  MSG
            IF  ^ ( CLOCKSUF = "00"  |  CLOCKSUF = "DS" )  THEN  DO
               SAY  "SUFFIX DOES NOT CONFORM TO STANDARD"
               STDBAD = STDBAD + 1
               ITERATE
            END
            LASTCSUF = CLOCKSUF
            PARMTZONE.CLOCKSUF  =  CHEKCLOCK(MEM)
            SAY "MEMBER "MEM" SPECIFIES TIMEZONE "PARMTZONE.CLOCKSUF
            CLOCKCNT =  CLOCKCNT + 1
            PUSH "  MEMBER "MEM" IN SYS1.PARMLIB ON VOLUME "VOL
            PUSH  " "
            "EXECIO  2  DISKW CLOCKLST"
            IORC = RC
            IF  IORC = 0  THEN  DO
               "EXECIO  "C.VOL.CLOCKSUF.0|,
                     |"  DISKW CLOCKLST  (STEM C."VOL"."CLOCKSUF"."
               IORC = RC
            END
            IF  IORC ^= 0  THEN  DO
               CALL EXITMSG  300   "CLOCKLIST WRITE ERROR, CODE "IORC
            END
         END
         IF  SUBSTR(MEM,1,6) = "IEASYS"  THEN  DO
            SYSSUF = SUBSTR(MEM,7,2)
            I  =  CHECKSYS(MEM)
            IF  I = 0  THEN  DO
               IF  SYSSUF = "00"  THEN  DO
                  SAY "IEASYS00 DOES NOT CONTAIN A CLOCK= "|,
                           |"SPECIFICATION, "NONSTD
                  STDBAD = STDBAD + 1
                  ITERATE
               END
               SAY "NO CLOCK SPECIFICATION DETECTED IN MEMBER "MEM
            END;  ELSE  DO
               IF  SYSSUF = "00"  THEN  DO
                  SAY "MEMBER IEASYS00 SPECIFIES CLOCK="CURSUF
               END;  ELSE  DO
                  IF  SYSSUF ^= "0X"  THEN  DO
                     SAY  MEM" CONTAINS A CLOCK= SPECIFICATION, "|,
                                 |NONSTD
                     STDBAD = STDBAD + 1
                     ITERATE
                  END
                 SAY "MEMBER IEASYS0X, ASSUMED TO BE A PREVIOUS "| ,
                       |"COPY OF IEASYS00, SPECIFIES CLOCK="CURSUF
               END
            END
         END
      END
      IF  CLOCKCNT = 0  THEN  DO
         SAY  "NO VALID CLOCKXX MEMBER PRESENT, "NONSTD
         STDBAD = STDBAD + 1
      END
      IF  CLOCKCNT = 1  & LASTCSUF ^= "00"  THEN  DO
         SAY  "MEMBER CLOCK00 NOT PRESENT, "NONSTD
         STDBAD = STDBAD + 1
      END
      RETURN


PARMERR:
      ARG ERR
      SAY  ERR
      SAY "2 PARAMETERS MUST BE SPECIFIED"
      SAY "THE FIRST, THE MODE PARAMETER, MUST BE "|,
            |"EITHER CHECK, CHECKP, CHECKA, UPDACT  OR  UPDACT"
      SAY "THE SECOND, THE REQUIRED CLOCK SUFFIX PARAMETER, "|,
            |"MUST BE EITHER 00 OR DS"
      CALL EXITMSG  300 "BOTH PARAMETRS MUST ALWAYS BE FULLY SPECIFIED"


EXITMSG:
      ARG XC  ERR
      SAY  ERR
      /*CALL "IPLSTATS"  "ERROR_"XC  ALTRES
      STATRC = RESULT
      IF  STATRC ^= 0  THEN  DO
         SAY  "IPLSTATS TERMINATED WITH CODE "STATRC
         XC = 2000 + STATRC
      END */
      SAY "RETURN CODE "XC" SET BY CLOCKCHG"
      EXIT  XC


ALLOCRTN:
      ARG DSN .
      "ALLOC DD(PLIB) DS("DSN") SHR REUS UNIT(SYSALLDA) VOL("VOL")"
      ALLOCRC = RC
      IF  ALLOCRC = 0  THEN  RETURN
      CALL  EXITMSG  400  "ALLOCATE OF "DSN" ON VOLUME "VOL|,
                              |" FAILED WITH CODE "ALLOCRC


CHECKSYS:
      ARG  SYSMEM .
      DSNMEM = PLIB"("SYSMEM")"
      CALL  ALLOCRTN  DSNMEM
      "EXECIO *  DISKR PLIB  (OPEN FINIS STEM PTEXT."
      IORC = RC
      IF  IORC ^= 0  THEN  DO
         CALL EXITMSG  500 "ACCESSING "DSNMEM" FAILED WITH CODE "IORC
      END
      "FREE  DD(PLIB)"
      IF PTEXT.0 < 1  THEN  RETURN 0
      JK = 0
      DO  JI = 1  BY 1  TO PTEXT.0
         STEXT = PTEXT.JI
         DO  FOREVER
            JJ = POS("CLOCK=",STEXT)
            IF JJ = 0  THEN  LEAVE
            JL = LENGTH(STEXT)
            IF JL < 9  THEN   CALL EXITMSG 504 ,
                   "PREMATURE END TO CLOCK= STRING IN MEMBER "SYSMEM
            CURSUF = SUBSTR(STEXT,JJ+6,2)
            JK = JK + 1
            CLIN = JI
            COFF = JJ
            XTEXT = SUBSTR(STEXT, JJ+9, JL-8)
            STEXT = XTEXT
         END
      END
      IF JK = 0  THEN  RETURN 0
      IF JK = 1  THEN  RETURN 1
      CALL  EXITMSG 508 ,
               "MULTIPLE CLOCK= STRINGS FOUND IN MEMBER "SYSMEM| ,
                     |NONSTD


CHEKCLOCK:
      ARG  CLOKMEM .
      DSNMEM = PLIB"("CLOKMEM")"
      CALL  ALLOCRTN  DSNMEM
      "EXECIO *  DISKR PLIB  (OPEN FINIS STEM C."VOL"."CLOCKSUF"."
      IORC = RC
      IF  IORC ^= 0  THEN  DO
         CALL EXITMSG  600 "ACCESSING "DSNMEM" FAILED WITH CODE "IORC
      END
      "FREE  DD(PLIB)"
      IF C.VOL.CLOCKSUF.0 < 1  THEN  DO
         CALL  EXITMSG 604 "CLOCK MEMBER "CLOKMEM" IS EMPTY, "NONSTD
      END
      DO  KI = 1  BY 1  TO C.VOL.CLOCKSUF.0
         PARSE  VAR C.VOL.CLOCKSUF.KI  P1 P2 .
         IF P1 = "TIMEZONE"  THEN  RETURN P2
      END
      CALL  EXITMSG  608  "CLOCK MEMBER "CLOKMEM| ,
                            |" DOES NOT SPECIFY TIMEZONE, "NONSTD


UPDATE:
      ARG  VOL
      SAY  "UPDATING IEASYS00 IN SYS1.PARMLIB ON "VOL
      IF  ^ CHECKSYS("IEASYS00")  THEN  CALL EXITMSG 700 ,
                    "2ND READ OF IEASYS00 FAILED"
      SAY  "OLD CLOCK LINE IS "PTEXT.CLIN
      PTEXT.CLIN = SUBSTR(PTEXT.CLIN,1,COFF+5)||REQID||,
                      SUBSTR(PTEXT.CLIN,COFF+8,80-(COFF+7))
      SAY  "NEW CLOCK LINE IS "PTEXT.CLIN
      DSNMEM = PLIB"(IEASYS00)"
      CALL  ALLOCRTN  DSNMEM
      "EXECIO "PTEXT.0"  DISKW PLIB  (OPEN FINIS STEM PTEXT."
      IORC = RC
      IF  IORC ^= 0  THEN  DO
         CALL EXITMSG  704 "WRITE TO "DSNMEM" FAILED WITH CODE "IORC
      END
      "FREE  DD(PLIB)"
      UPDVOL = VOL
      FINRC = FINRC - 4
      RETURN


CLOCKCOMP:
      ARG  SUF1  VOL1  SUF2 VOL2
      SAY  "COMPARING CLOCK"SUF1" ON VOL "VOL1" WITH "| ,
                    |"CLOCK"SUF2" ON VOL "VOL2
      SAY  C.VOL1.SUF1.0" RECORDS IN CLOCK"SUF1" ON "VOL1
      R1CNT = 0
      DO  KI = 1  BY 1  TO C.VOL1.SUF1.0
         CUREC = REMCOM(C.VOL1.SUF1.KI)
         IF LENGTH(CUREC) = 0  THEN  ITERATE
         IF SUF1 ^= SUF2  THEN  DO
            IF  WORD(CUREC,1) = "TIMEZONE"  THEN ITERATE
         END
         R1CNT = R1CNT + 1
         R1.R1CNT = CUREC
      END
      SAY  C.VOL2.SUF2.0" RECORDS IN CLOCK"SUF2" ON "VOL2
      R2CNT = 0
      if C.VOL2.SUF2.0 > 0 then 
         DO  KI = 1  BY 1  TO C.VOL2.SUF2.0
            CUREC = REMCOM(C.VOL2.SUF2.KI)
            IF LENGTH(CUREC) = 0  THEN  ITERATE
            IF SUF1 ^= SUF2  THEN  DO
               IF  WORD(CUREC,1) = "TIMEZONE"  THEN ITERATE
            END
            R2CNT = R2CNT + 1
            R2.R2CNT = CUREC
         END
      IF  R1CNT ^= R2CNT  THEN  DO
         DIFFSFND = 1
         SAY "MEMBERS HAVE EEFCTIVELY DIFFERENT LINE COUNTS"
         RETURN
      END
      DO  FOREVER
         SWAP = 0
         DO  KI = 1  BY 1  TO R1CNT - 1
            KIX = KI + 1
            IF  R1.KI >  R1.KIX  THEN  DO
               CUREC  = R1.KI
               R1.KI  = R1.KIX
               R1.KIX = CUREC
               SWAP = 1
            END
         END
         IF  ^ SWAP  THEN  LEAVE
      END
      DO  FOREVER
         SWAP = 0
         DO  KI = 1  BY 1  TO R2CNT - 1
            KIX = KI + 1
            IF  R2.KI >  R2.KIX  THEN  DO
               CUREC  = R2.KI
               R2.KI  = R2.KIX
               R2.KIX = CUREC
               SWAP = 1
            END
         END
         IF  ^ SWAP  THEN  LEAVE
      END
      DO  KI = 1  BY 1  TO R1CNT
         IF  R1.KI = R2.KI THEN  ITERATE
         DIFFSFND = 1
         SAY  "MEMBER DIFFERENCES DETECTED"
         RETURN
      END
      SAY  "MEMBERS EFFECTIVELY IDENTICAL"
      RETURN


REMCOM:        PROCEDURE
      ARG  LN1
      LN1L = LENGTH(LN1)
      IF LN1L = 80 THEN DO
        LN2 = STRIP(SUBSTR(LN1,1,71))
      END;  ELSE  DO
         CALL EXITMSG  148 "UNEX. LEN.,"LN1L", FOR "LN1
      END
      DO  FOREVER
         IF  POS("/*",LN2 ) = 0  THEN  LEAVE
         PARSE  VAR LN2  LN2A "/*" . "*/" LN2B
         LN2 = STRIP(LN2A" "LN2B)
      END
      DO  FOREVER
         IF  POS("  ",LN2 ) = 0  THEN  LEAVE
         PARSE  VAR LN2  LN2A "  " LN2B
         LN2 = LN2A" "LN2B
      END
      RETURN  STRIP(LN2)
